
set(targets 01_findmodule)
set(targetopencvs 02_showdevice 03_findvulkan) 
set(targetvulkans 04_vulkantest 06_mediaplayer)
set(targetdx11 07_wintest 09_wincapture)

if(WIN32)
    SET(OpenCV_DIR D:/WorkSpace/C++/opencv/opencv41/build/install)
    find_package(OpenCV)
    message(STATUS "OpenCV library status:")
    message(STATUS "    found: ${OpenCV_FOUND}")
    message(STATUS "    version: ${OpenCV_VERSION}")
    message(STATUS "    version: ${OpenCV_VERSION}")
    message(STATUS "    libraries: ${OpenCV_LIBS}")
    message(STATUS "    librarie path: ${OpenCV_LIB_PATH}")
    message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")
endif()

function(generate target isopencv iswin32)    
    set(source ${target}/${target}.cpp)     
    if(WIN32 AND iswin32)            
        add_executable(${target} WIN32 ${source})
    else() 
        add_executable(${target} ${source})
    endif()    
    # target_link_options(${target} PRIVATE -mwindows)    
    if(isopencv)    
        message(STATUS "link opencv: ${OpenCV_LIBS}")    
        target_link_libraries(${target} aoce ${OpenCV_LIBS} ${ARGN})
    else()
        target_link_libraries(${target} aoce ${ARGN})
    endif()
    aoce_output(${target})
endfunction()

function(sample)
    foreach(target ${targets})
        generate(${target} FALSE FALSE)
    endforeach()
    if(OpenCV_FOUND)
        foreach(target ${targetopencvs})
            generate(${target} TRUE FALSE)
        endforeach()    
    endif() 
    foreach(target ${targetvulkans})
        if(WIN32)
            generate(${target} FALSE TRUE aoce_vulkan ${Vulkan_LIBRARY})
        endif()  
    endforeach() 
    foreach(target ${targetdx11})
        generate(${target} FALSE TRUE aoce_win aoce_vulkan aoce)
    endforeach()
endfunction(sample) 

include_directories("../code")
include_directories("../install/win/include")

if(WIN32)
    include_directories(${AOCE_HEADER_DIR} ${OpenCV_INCLUDE_DIRS} ${AOCE_VULKAN_HEADER_DIR} ${Vulkan_INCLUDE_DIR})
    sample()    

    if(AOCE_INSTALL_AGORA)
        generate(05_livetest FALSE TRUE aoce_vulkan ${Vulkan_LIBRARY})
    endif()
    if(OpenCV_FOUND)
        generate(08_vulkanextra TRUE FALSE aoce aoce_vulkan aoce_vulkan_extra)
        if(AOCE_TALKTO_EXIST)
            generate(talktotest TRUE FALSE aoce_talkto)
        endif()
    endif()

    # add_subdirectory(mathtest)
endif()

if(ANDROID)
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -u ANativeActivity_onCreate")
    # set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -u ANativeActivity_onCreate")
    include_directories(${ANDROID_NDK}/sources/android/native_app_glue ${AOCE_HEADER_DIR} ${AOCE_VULKAN_HEADER_DIR} ${Vulkan_INCLUDE_DIR})
    add_library(native-app-glue STATIC ${ANDROID_NDK}/sources/android/native_app_glue/android_native_app_glue.c)
    
    add_library(04_vulkantest SHARED 04_vulkantest/04_vulkantest.cpp)
    target_link_libraries(04_vulkantest android native-app-glue aoce aoce_vulkan)
    
    if(AOCE_INSTALL_AGORA)
        add_library(05_livetest SHARED 05_livetest/05_livetest.cpp)
        target_link_libraries(05_livetest android native-app-glue aoce aoce_vulkan)
    endif()

    add_library(06_mediaplayer SHARED 06_mediaplayer/06_mediaplayer.cpp)
    target_link_libraries(06_mediaplayer android aoce aoce_vulkan aoce_ffmpeg)

    add_library(07_androidtest SHARED 07_androidtest/07_androidtest.cpp)
    target_link_libraries(07_androidtest android native-app-glue aoce aoce_vulkan aoce_android)
endif()

add_subdirectory(vulkanextratest)

if(AOCE_INSTALL_AGORA AND WIN32)
    add_subdirectory(talkto_live_test)
endif() 

if(AOCE_CUDA_MODULE AND OpenCV_FOUND AND WIN32)
    add_subdirectory(cudatest)
endif() 

if(WIN32)
    add_subdirectory(mathtest)
endif()