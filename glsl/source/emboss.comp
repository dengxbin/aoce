#version 450

layout (local_size_x = 16, local_size_y = 16) in;// gl_WorkGroupSize

layout (binding = 0, rgba8) uniform readonly image2D inTex;
layout (binding = 1, rgba8) uniform image2D outTex;

layout (binding = 2) uniform UBO {
	float intensity;
} ubo;

const float kernel[9] = {-2.0f,-1.0f,0.0f,-1.0f,0.0f,1.0f,0.0f,1.0f,2.0f};

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(outTex);    
    if(uv.x >= size.x || uv.y >= size.y){
        return;
    }
    vec4 rgba = imageLoad(inTex,uv); 
    vec3 result = rgba.rgb;
    for(int i = 0; i< 3; ++i){
        for(int j= 0; j< 3; ++j){
            int x = uv.x - 1 + j;
            int y = uv.y - 1 + i;
            // REPLICATE border
            x = max(0,min(x,size.x-1));
            y = max(0,min(y,size.y-1));
            int index = j+i*3;
            if(kernel[index] != 0.0f){
                vec3 value = imageLoad(inTex,ivec2(x,y)).rgb;
                result += result * kernel[index] * ubo.intensity;
            }
        }
    }
    imageStore(outTex, uv, vec4(result,rgba.a)); 
}