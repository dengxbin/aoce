#version 450

layout (local_size_x = 16, local_size_y = 16) in;// gl_WorkGroupSize

layout (binding = 0, rgba8) uniform readonly image2D inTex;
layout (binding = 1, rgba8) uniform image2D outTex;

layout (binding = 2) uniform UBO {
	int radius;
} ubo;

shared uint data_shared[16*3][16*3];

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(inTex);
    ivec2 locId = ivec2(gl_LocalInvocationID.xy);
    // data_shared如果没置空,就需要设置值,在uv<size之前,保证data_shared全有值
    for(int i = 0; i < 3; i++){
        uint gIdy = max(0,min(uv.y+(i-1)*16,size.y-1));
        for(int j = 0; j < 3; j++){
            uint gIdx = max(0,min(uv.x+(j-1)*16,size.x-1));
            data_shared[locId.y+i*16][locId.x + j*16] = packUnorm4x8(imageLoad(inTex,ivec2(gIdx,gIdy)));      
        }
    }
    if(uv.x >= size.x || uv.y >= size.y){
        return;
    } 
    memoryBarrierShared();
	barrier();
    vec3 m[4] = {vec3(0.0),vec3(0.0),vec3(0.0),vec3(0.0)};
    vec3 s[4] = {vec3(0.0),vec3(0.0),vec3(0.0),vec3(0.0)};
    for(int i=-ubo.radius; i <= 0; ++i){
        for(int j=-ubo.radius; j <= 0; ++j){
            uint sd = data_shared[locId.y+16+i][locId.x+16+j];
            vec3 c = unpackUnorm4x8(sd).rgb;
            m[0] += c;
            s[0] += c*c;
        }
    }
    for(int i=-ubo.radius; i <= 0; ++i){
        for(int j= 0; j <= ubo.radius; ++j){
            uint sd = data_shared[locId.y+16+i][locId.x+16+j];
            vec3 c = unpackUnorm4x8(sd).rgb;
            m[1] +=c;
            s[1] +=c*c;
        }
    }
    for(int i= 0; i <= ubo.radius; ++i){
        for(int j= 0; j <= ubo.radius; ++j){
            uint sd = data_shared[locId.y+16+i][locId.x+16+j];
            vec3 c = unpackUnorm4x8(sd).rgb;
            m[2] +=c;
            s[2] +=c*c;
        }
    }
    for(int i= 0; i <= ubo.radius; ++i){
        for(int j=-ubo.radius; j <= 0; ++j){
            uint sd = data_shared[locId.y+16+i][locId.x+16+j];
            vec3 c = unpackUnorm4x8(sd).rgb;
            m[3] +=c;
            s[3] +=c*c;
        }
    }
    float scale = 1.0f/((ubo.radius+1)*(ubo.radius+1));  
    vec3 result = m[0];
    float min_sigma = 100.0;
    for(int i =0;i<4;i++){
        m[i] *= scale;
        s[i] = abs(s[i]*scale - m[i]*m[i]);
        float sigma = s[i].r + s[i].g +s[i].b;
        if(sigma < min_sigma){
            min_sigma = sigma;
            result = m[i];
        }
    }
    imageStore(outTex, uv, vec4(result,1.0f)); 
}
