#version 450

layout (local_size_x = 16, local_size_y = 16) in;// gl_WorkGroupSize
layout (binding = 0) uniform sampler2D inSampler;
layout (binding = 1) uniform sampler2D inSampler1;
layout (binding = 2, rgba8) uniform image2D outTex;

layout (std140, binding = 3) uniform UBO {
    float offset;    
} ubo;

const vec4 centerT[8] = {
    vec4(3.0,1.0,0.94868,0.316227),
    vec4(1.0,3.0,0.316227,0.94868),
    vec4(-1.0,3.0,-0.316227,0.94868),
    vec4(-3.0,1.0,-0.94868,0.316227),
    vec4(-3.0,-1.0,-0.94868,-0.316227),
    vec4(-1.0,-3.0,-0.316227,-0.94868),
    vec4(1.0,-3.0,0.316227,-0.94868),
    vec4(3.0,-1.0,0.94868,-0.316227)
};

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(outTex);    
    if(uv.x >= size.x || uv.y >= size.y){
        return;
    }  
    vec2 suv = (vec2(uv)+vec2(0.5f))/vec2(size);
    vec3 color = textureLod(inSampler, suv,0).rgb;    
    vec3 sum = vec3(0.0);
    vec3 dirX = vec3(0.0);
    vec3 dirY = vec3(0.0);
    for(int i=0;i<8;i++){
        vec2 csuv = (vec2(uv)+vec2(centerT[i].xy*ubo.offset)+vec2(0.5f))/vec2(size); 
        vec3 ccolor = textureLod(inSampler1, csuv,0).rgb;
        sum += ccolor;
        dirX += ccolor * centerT[i].z;
        dirY += ccolor * centerT[i].w;
    } 
    vec3 colorComparison = (sum*0.125 - color);  
    vec3 absoluteDifference = abs(colorComparison);
    float componentLength = length(colorComparison);
    float avgX = dot(absoluteDifference, dirX) / componentLength;
    float avgY = dot(absoluteDifference, dirY) / componentLength;
    float angle = atan(avgY, avgX);
    
    vec3 normalizedColorComparison = (colorComparison + 1.0) * 0.5;    
    imageStore(outTex,uv,vec4(normalizedColorComparison,(angle+3.1416)/6.2832));
}

