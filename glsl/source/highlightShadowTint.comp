#version 450

layout (local_size_x = 16, local_size_y = 16) in;// gl_WorkGroupSize

layout (binding = 0, rgba8) uniform readonly image2D inTex;
layout (binding = 1, rgba8) uniform image2D outTex;

layout (std140, binding = 2) uniform UBO {
    float shadowTintIntensity;
    float highlightTintIntensity;
    float shadowTintColorX;
    float shadowTintColorY;
    float shadowTintColorZ;
    float highlightTintColorX;
    float highlightTintColorY;
    float highlightTintColorZ;
} ubo;

const vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(inTex);    
    if(uv.x >= size.x || uv.y >= size.y){
        return;
    }   
    vec4 textureColor = imageLoad(inTex,uv);
    vec3 shadowTintColor = vec3(ubo.shadowTintColorX,ubo.shadowTintColorY,ubo.shadowTintColorZ);
    vec3 highlightTintColor = vec3(ubo.highlightTintColorX,ubo.highlightTintColorY,ubo.highlightTintColorZ);
    float luminance = dot(textureColor.rgb, luminanceWeighting);
    
    vec4 shadowResult = mix(textureColor, max(textureColor, vec4( mix(shadowTintColor.rgb, textureColor.rgb, luminance), textureColor.a)), ubo.shadowTintIntensity);
    vec4 highlightResult = mix(textureColor, min(shadowResult, vec4( mix(shadowResult.rgb, highlightTintColor.rgb, luminance), textureColor.a)), ubo.highlightTintIntensity);    

    imageStore(outTex,uv,vec4(mix(shadowResult.rgb, highlightResult.rgb, luminance), textureColor.a));
}