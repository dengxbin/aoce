#version 450

layout (local_size_x = 16, local_size_y = 16) in;// gl_WorkGroupSize

layout (binding = 0, rgba8) uniform readonly image2D inTex;
layout (binding = 1, rgba8) uniform image2D outTex;

layout (std140, binding = 2) uniform UBO {
    float skinToneAdjust;
    float skinHue;
    float skinHueThreshold;
    float maxHueShift;
    float maxSaturationShift;    
    int upperSkinToneColor;
} ubo;

 // RGB <-> HSV conversion, thanks to http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl
highp vec3 rgb2hsv(highp vec3 c){
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
    
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
 
 // HSV <-> RGB conversion, thanks to http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl
highp vec3 hsv2rgb(highp vec3 c){
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(inTex);    
    if(uv.x >= size.x || uv.y >= size.y){
        return;
    }   
    vec4 colorRGB = imageLoad(inTex,uv);    
    vec3 colorHSV = rgb2hsv(colorRGB.rgb);
    float hue = colorHSV.x;
    
    // check how far from skin hue
    float dist = hue - ubo.skinHue;
    if (dist > 0.5)
        dist -= 1.0;
    if (dist < -0.5)
        dist += 1.0;
    dist = abs(dist)/0.5; // normalized to [0,1]
    
    // Apply Gaussian like filter
    float weight = exp(-dist*dist*ubo.skinHueThreshold);
    weight = clamp(weight, 0.0, 1.0);
    
    // Using pink/green, so only adjust hue
    if (ubo.upperSkinToneColor == 0) {
        colorHSV.x += ubo.skinToneAdjust * weight * ubo.maxHueShift;
        // Using pink/orange, so adjust hue < 0 and saturation > 0
    } else if (ubo.upperSkinToneColor == 1) {
        // We want more orange, so increase saturation
        if (ubo.skinToneAdjust > 0.0)
            colorHSV.y += ubo.skinToneAdjust * weight * ubo.maxSaturationShift;
        // we want more pinks, so decrease hue
        else
            colorHSV.x += ubo.skinToneAdjust * weight * ubo.maxHueShift;
    }    
    // final color
    vec3 finalColorRGB = hsv2rgb(colorHSV.rgb);
    imageStore(outTex,uv,vec4(finalColorRGB,1.0f));
}