#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inTex;
layout (binding = 1, rgba8) uniform image2D outTex;

layout (std140, binding = 2) uniform UBO {
    float intensity;
    float filterColorX;
    float filterColorY;
    float filterColorZ;
} ubo;

const vec3 W = vec3(0.2125, 0.7154, 0.0721);

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(outTex);
    if(uv.x >= size.x || uv.y >= size.y){
        return;
    }
    vec4 rgba = imageLoad(inTex,uv);
    float luminance = dot(rgba.rgb, W);
    vec4 desat = vec4(vec3(luminance), 1.0);
    vec3 filterColor = vec3(ubo.filterColorX,ubo.filterColorY,ubo.filterColorZ);     
    vec4 outputColor = vec4(
        (desat.r < 0.5 ? (2.0 * desat.r * filterColor.r) : (1.0 - 2.0 * (1.0 - desat.r) * (1.0 - filterColor.r))),
        (desat.g < 0.5 ? (2.0 * desat.g * filterColor.g) : (1.0 - 2.0 * (1.0 - desat.g) * (1.0 - filterColor.g))),
        (desat.b < 0.5 ? (2.0 * desat.b * filterColor.b) : (1.0 - 2.0 * (1.0 - desat.b) * (1.0 - filterColor.b))),
        1.0);
    vec4 result = vec4(mix(rgba.rgb, outputColor.rgb, ubo.intensity), rgba.a);
    imageStore(outTex, uv,result); 
}