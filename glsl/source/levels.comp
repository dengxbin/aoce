#version 450

layout (local_size_x = 16, local_size_y = 16) in;// gl_WorkGroupSize

layout (binding = 0, rgba8) uniform readonly image2D inTex;
layout (binding = 1, rgba8) uniform image2D outTex;

layout (std140, binding = 2) uniform UBO {
    float minVecX;
    float minVecY;
    float minVecZ;
    float midVecX;
    float midVecY;
    float midVecZ;
    float maxVecX;
    float maxVecY;
    float maxVecZ;
    float minOutVecX;
    float minOutVecY;
    float minOutVecZ;
    float maxOutVecX;
    float maxOutVecY;
    float maxOutVecZ;
} ubo;

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(inTex);    
    if(uv.x >= size.x || uv.y >= size.y){
        return;
    }   
    vec4 color = imageLoad(inTex,uv);
    vec3 minVec = vec3(ubo.minVecX,ubo.minVecY,ubo.minVecZ);
    vec3 midVec = vec3(ubo.midVecX,ubo.midVecY,ubo.midVecZ);
    vec3 maxVec = vec3(ubo.maxVecX,ubo.maxVecY,ubo.maxVecZ);
    vec3 minOutVec = vec3(ubo.minOutVecX,ubo.minOutVecY,ubo.minOutVecZ);
    vec3 maxOutVec = vec3(ubo.maxOutVecX,ubo.maxOutVecY,ubo.maxOutVecZ);

    vec3 inputRange = min(max(color.rgb - minVec, vec3(0.0)) / (maxVec - minVec), vec3(1.0));
    vec3 inputVec = pow(inputRange,1.0/midVec);
    vec3 outputVec = mix(minOutVec,maxOutVec,inputVec);    
     
    imageStore(outTex,uv,vec4(outputVec,color.a));
}