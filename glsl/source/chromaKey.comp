#version 450

// https://www.unrealengine.com/en-US/tech-blog/setting-up-a-chroma-key-material-in-ue4

layout (local_size_x = 16, local_size_y = 16) in;// gl_WorkGroupSize
layout (binding = 0, rgba8) uniform readonly image2D inTex;
layout (binding = 1, rgba8) uniform image2D outTex;

layout (std140, binding = 2) uniform UBO {
    // 0.2 控制亮度的强度系数
    float lumaMask;
    float chromaColorX;
    float chromaColorY;
    float chromaColorZ;
    // 用环境光补受蓝绿幕影响的像素(简单理解扣像结果要放入的环境光的颜色)
    float ambientScale;
    float ambientColorX;  
    float ambientColorY; 
    float ambientColorZ;   
    // 0.4
    float alphaCutoffMin;
    // 0.5
    float alphaCutoffMax;
    float alphaExponent;
    // 0.8
    float despillCuttofMax;
    float despillExponent;
} ubo;

const float PI = 3.1415926;

vec3 extractColor(vec3 color,float lumaMask){   
    float luma = dot(color,vec3(1.0f));
    // 亮度指数
    float colorMask = exp(-luma*2*PI/lumaMask);
    // color*(1-colorMask)+color*luma
    color = mix(color,vec3(luma),colorMask);
    // 生成基于亮度的饱和度图    
    return color / dot(color,vec3(2.0));
}

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(outTex);    
    if(uv.x >= size.x || uv.y >= size.y){
        return;
    }    
    vec3 inputColor = imageLoad(inTex,uv).rgb;   
    vec3 chromaColor = vec3(ubo.chromaColorX,ubo.chromaColorY,ubo.chromaColorZ);
    vec3 ambientColor = vec3(ubo.ambientColorX,ubo.ambientColorY,ubo.ambientColorZ);
    vec3 color1 = extractColor(chromaColor,ubo.lumaMask);
    vec3 color2 = extractColor(inputColor,ubo.lumaMask);
    vec3 subColor = color1 - color2;
    float diffSize = length(subColor);
    float minClamp = diffSize-ubo.alphaCutoffMin;
    float dist = ubo.alphaCutoffMax - ubo.alphaCutoffMin;
    // 扣像alpha
    float alpha= clamp(pow(max(minClamp/dist,0),ubo.alphaExponent),0.0,1.0);
    // 受扣像背景影响的颜色alpha
    float inputClamp = ubo.despillCuttofMax - ubo.alphaCutoffMin;
    float despillAlpha = 1.0f- clamp(pow(max(minClamp/inputClamp,0),ubo.despillExponent),0.0,1.0);
    // 亮度系数
    vec3 lumaFactor = vec3(0.3f,0.59f,0.11f);    
    // 添加环境光收益
    vec3 dcolor = inputColor*lumaFactor*ambientColor*ubo.ambientScale*despillAlpha;
    // 去除扣像背景
    dcolor -= inputColor*chromaColor*despillAlpha;
    dcolor += inputColor;    
    // 为了显示查看效果,后面屏蔽
    dcolor = inputColor*alpha + ambientColor*(1.0-alpha);
    imageStore(outTex,uv,vec4(dcolor,alpha)); 
}
