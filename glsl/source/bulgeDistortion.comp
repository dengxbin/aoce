#version 450

layout (local_size_x = 16, local_size_y = 16) in;// gl_WorkGroupSize

layout (binding = 0) uniform sampler2D inSampler;
layout (binding = 1, rgba8) uniform image2D outTex;

layout (std140, binding = 2) uniform UBO {
    float aspectRatio;
    float centerX;
    float centerY;
    float radius;
    float scale;
} ubo;

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(outTex);    
    if(uv.x >= size.x || uv.y >= size.y){
        return;
    } 
    vec2 center = vec2(ubo.centerX,ubo.centerY);
    vec2 suv = (vec2(uv)+vec2(0.5f))/vec2(size); 
    // 由aspectRatio可以把长宽的物理大小统一1:1
    // 简单来说人眼中的圆对应UV的比例并不同.
    vec2 coord = vec2(suv.x,(suv.y-ubo.centerY)*ubo.aspectRatio + ubo.centerY);  
    // 由coord计算圆心
    float dist = distance(center,coord);
    coord = suv;
    // 小于设定半径,这个半径与水平方向UV统一,与上面coord的换算有关
    if(dist < ubo.radius){
        // 转化成圆心坐标系
        coord = coord - center;
        // 和圆心越近,则percent越靠近1,否则靠近0
        float percent = 1.0 - ((ubo.radius-dist)/ubo.radius)*ubo.scale;
        percent = percent * percent;
        // 圆心越近,UV越缩小
        coord = coord * percent;
        // 转化成UV坐标系
        coord = coord + center;
    }
    vec4 inColor = textureLod(inSampler, coord,0);  
    imageStore(outTex,uv,inColor);
}