#version 450

// 将图像转换为黑白交叉影线图案

layout (local_size_x = 16, local_size_y = 16) in;// gl_WorkGroupSize

layout (binding = 0, rgba8) uniform readonly image2D inTex;
layout (binding = 1, rgba8) uniform image2D outTex;

layout (std140, binding = 2) uniform UBO {
    float crossHatchSpacing;
    float lineWidth;
} ubo;

const vec3 W = vec3(0.2125, 0.7154, 0.0721);

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(outTex);
    if(uv.x >= size.x || uv.y >= size.y){
        return;
    }
    vec4 rgba = imageLoad(inTex,uv);
    float luminance = dot(rgba.rgb, W);
    vec2 suv = (vec2(uv)+vec2(0.5f))/vec2(size);
    vec4 colorToDisplay = vec4(1.0, 1.0, 1.0, 1.0);
    if (luminance < 1.00) {
        if (mod(suv.x + suv.y, ubo.crossHatchSpacing) <= ubo.lineWidth) {
            colorToDisplay = vec4(0.0, 0.0, 0.0, 1.0);
        }
    }
    if (luminance < 0.75) {
        if (mod(suv.x - suv.y, ubo.crossHatchSpacing) <= ubo.lineWidth) {
            colorToDisplay = vec4(0.0, 0.0, 0.0, 1.0);
        }
    }
    if (luminance < 0.50) {
        if (mod(suv.x + suv.y - (ubo.crossHatchSpacing / 2.0), ubo.crossHatchSpacing) <= ubo.lineWidth) {
            colorToDisplay = vec4(0.0, 0.0, 0.0, 1.0);
        }
    }
    if (luminance < 0.3) {
        if (mod(suv.x - suv.y - (ubo.crossHatchSpacing / 2.0), ubo.crossHatchSpacing) <= ubo.lineWidth) {
            colorToDisplay = vec4(0.0, 0.0, 0.0, 1.0);
        }
    }
    imageStore(outTex, uv, colorToDisplay); 
}