#version 450

layout (local_size_x = 240, local_size_y = 1) in;
layout (binding = 0) buffer inBuffer{
    uint dataIn[];
};

layout (binding = 1, rgba8) uniform image2D outTex;

uvec4 uint32Unzip(uint data) {
    uvec4 xrgba = uvec4(data & 0x000000FF, (data & 0x0000FF00) >> 8,
                        (data & 0x00FF0000) >> 16, (data & 0xFF000000) >> 24);
    return xrgba;
}

uint uint8Zip(uvec4 rgba) {
    uint data = rgba.x | rgba.y << 8 | rgba.z << 16 | rgba.w << 24;
    return data;
}

ivec2 u12u2(int index, int step) {
	ivec2 uv;
	uv.y = index / step;
	uv.x = index - uv.y*step;
	return uv;
}

const float UINT82FLOAT = 0.00392156862745f;

vec4 uchar2float(uvec4 rgba) {
	vec4 xrgba = vec4(rgba) * UINT82FLOAT;
	return xrgba;
}

void main(){
    ivec2 size = imageSize(outTex);
	int index = int(gl_GlobalInvocationID.x);
    #if CHANNEL_RGB
        // 一个线程处理四个数据,刚好对应inbuffer里的三个数据
        if(index>=size.x*size.y/4){
            return;
        }
        //uvec4 data1 = uint32Unzip(dataIn[index*3]);
        //uvec4 data2 = uint32Unzip(dataIn[index*3+1]);
        //uvec4 data3 = uint32Unzip(dataIn[index*3+2]);

        //vec4 rgba1 = uchar2float(uvec4(data1[0],data1[1],data1[2],255));
        //vec4 rgba2 = uchar2float(uvec4(data1[3],data2[0],data2[1],255));
        //vec4 rgba3 = uchar2float(uvec4(data2[2],data2[3],data3[0],255));
        //vec4 rgba4 = uchar2float(uvec4(data3[1],data3[2],data3[3],255));

        vec4 data1 = unpackUnorm4x8(dataIn[index*3]);
        vec4 data2 = unpackUnorm4x8(dataIn[index*3+1]);
        vec4 data3 = unpackUnorm4x8(dataIn[index*3+2]);

        vec4 rgba1 = vec4(data1.xyz,1.0f);
        vec4 rgba2 = vec4(data1.w,data2.x,data2.y,1.0f);
        vec4 rgba3 = vec4(data2.z,data2.w,data3.x,1.0f);
        vec4 rgba4 = vec4(data3.yzw,1.0f);
        
        ivec2 uv = u12u2(index*4,size.x);
        imageStore(outTex, uv,rgba1); 
        imageStore(outTex, uv+ivec2(1,0),rgba2); 
        imageStore(outTex, uv+ivec2(2,0),rgba3); 
        imageStore(outTex, uv+ivec2(3,0),rgba4);   
    #elif CHANNEL_BRGA
        if(index>=size.x*size.y){
            return;
        }
        // vec4 rgba = uchar2float(uint32Unzip(dataIn[index]));
        vec4 rgba = unpackUnorm4x8(dataIn[index]);
        vec4 result = rgba.zyxw;// vec4(rgba.z,rgba.y,rgba.x,rgba.w);
        ivec2 uv = u12u2(index,size.x);
        imageStore(outTex, uv,result);
    #elif CHANNEL_ARGB
        if(index>=size.x*size.y){
            return;
        }
        // vec4 rgba = uchar2float(uint32Unzip(dataIn[index]));
        vec4 rgba = unpackUnorm4x8(dataIn[index]);
        vec4 result = rgba.yzwx;// vec4(rgba.y,rgba.z,rgba.w,rgba.x);
        ivec2 uv = u12u2(index,size.x);
        imageStore(outTex, uv,result); 
    #endif
}

