#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inTex;
layout (binding = 1, rgba8) uniform image2D outTex;
layout (binding = 2) uniform UBO {
	int width;
	int height;
	int yuvType;
} ubo;

vec4 rgb2Yuv(vec4 rgba) {
	vec4 yuva;
	//xyz -> yuv
	yuva.x = clamp(0.299 * rgba.r + 0.587 * rgba.g + 0.114 * rgba.b, 0, 1);
	//uv (-0.5,0.5)
	yuva.y = clamp(-0.1687 * rgba.r - 0.3313 * rgba.g + 0.5 * rgba.b + 0.5f, 0, 1);
	yuva.z = clamp(0.5 * rgba.r - 0.4187 * rgba.g - 0.0813 * rgba.b + 0.5f, 0, 1);
	yuva.a = clamp(rgba.w, 0, 1);
	return yuva; 
}

void main(){
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(outTex);
    if(uv.x >= size.x || uv.y >= size.y){
        return;
    }
	// yuv2I
	int bitx = 0;
	int yoffset = 0;
	// yvyuI
	if(ubo.yuvType == 5){
		bitx= 2;
	}
	// uyvyI
	if(ubo.yuvType == 6){
		yoffset = 1;
	}

	vec4 rgba1 = imageLoad(inTex,ivec2(uv.x*2,uv.y)).rgba;
    vec4 rgba2 = imageLoad(inTex,ivec2(uv.x*2+1,uv.y)).rgba;

    vec4 yuv1 = rgb2Yuv(rgba1);
	vec4 yuv2 = rgb2Yuv(rgba2);
    
    vec4 yuyv = vec4(yuv1.x, (yuv1.y + yuv2.y) / 2.f, yuv2.x,
                                   (yuv1.z + yuv2.z) / 2.f);	
    vec4 syuyv = vec4(yuyv[yoffset], yuyv[bitx + (1 - yoffset)],
                        yuyv[yoffset + 2], yuyv[(2 - bitx) + (1 - yoffset)]);
	imageStore(outTex, uv,syuyv); 	
}