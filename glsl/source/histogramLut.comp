#version 450

layout (local_size_x = 256, local_size_y = 1) in;// gl_WorkGroupSize

layout (binding = 0, r32i) uniform readonly iimage2D inTex;
layout (binding = 1, r32f) uniform image2D outTex;

layout (std140, binding = 2) uniform UBO {
    int total;
} ubo;

shared int data_shared[256];

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);    
    ivec2 size = imageSize(outTex);    
    if(uv.x >= size.x || uv.y >= size.y){
        return;
    }   
    int tid = int(gl_LocalInvocationIndex); 
    data_shared[tid] = imageLoad(inTex,uv).r;
    memoryBarrierShared();
    barrier();
    // 只能说浪费了,没想到什么好的方法解决GPU类似DP问题
    if(tid == 0){   
        int sum = 0;            
        for(int j = 0; j< 256; j++){
            if(data_shared[j] > 0){
                sum += data_shared[j];
                data_shared[j] = sum;                
            }
        }
    }
    memoryBarrierShared();
    barrier();
    float rand = float(data_shared[tid])/ubo.total;    
    imageStore(outTex,uv,vec4(rand));
}